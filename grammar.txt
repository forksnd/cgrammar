

token:
 keyword
 identifier
 constant
 string-literal
 punctuator

preprocessing-token:
 header-name
 identifier
 pp-number
 character-constant
 string-literal
 punctuator
 /*each universal-character-name that cannot be one of the above*/
 /*each non-white-space character that cannot be one of the above*/

/*Keywords*/

keyword:  one off
  "alignas"   "alignof"   "auto"  "bool"   "break"   "case"  "char"  "const"
  "constexpr"  "continue"   "default" "do" "double" "else" "enum" "extern"
  "false" "float" "for" "goto" "if" "inline" "int" "long" "nullptr" "register"
  "typeof_unqual" "restrict" "return" "short" "signed" "sizeof" "static"
  "static_assert" "struct" "switch"  "thread_local" "true" "typedef" "typeof" "union"
  "unsigned" "void" "volatile" "while" "_Atomic" "_BitInt" "_Complex" "_Decimal128" 
  "_Decimal32" "_Decimal64" "_Generic" "_Imaginary" "_Noreturn"

/*Identifiers*/

identifier:
 identifier-start
 identifier identifier-continue
 
identifier-start:
 nondigit
 /*XID_Start character*/
 /*universal-character-name of class XID_Start*/
 
identifier-continue:
 digit
 nondigit
 /*XID_Continue character*/
 /*universal-character-name of class XID_Continue*/
 
nondigit: one of 
_ a b c d e f g h i j k l m
n o p q r s t u v w x y z
A B C D E F G H I J K L M
N O P Q R S T U V W X Y Z

digit: one of
 0 1 2 3 4 5 6 7 8 9
 
universal-character-name:
 \u hex-quad
 \U hex-quad hex-quad

hex-quad:
 hexadecimal-digit hexadecimal-digit hexadecimal-digit hexadecimal-digit


constant:
 integer-constant
 floating-constant
 enumeration-constant
 character-constant
 predefined-constant

integer-constant:
 decimal-constant integer-suffix opt
 octal-constant integer-suffix opt
 hexadecimal-constant integer-suffix opt
 binary-constant integer-suffix

decimal-constant:
 nonzero-digit
 decimal-constant ' opt digit

octal-constant:
 0
 octal-constant ' opt octal-digit
 
 
hexadecimal-constant:
 hexadecimal-prefix hexadecimal-digit-sequence
 
binary-constant:
 binary-prefix binary-digit
 binary-constant ' opt binary-digit

hexadecimal-prefix: one of
 0x 0X

binary-prefix: one of
 0b 0B
 
nonzero-digit: one of
 1 2 3 4 5 6 7 8 9
 
octal-digit: one of
  0 1 2 3 4 5 6 7

hexadecimal-digit-sequence:
  hexadecimal-digit
  hexadecimal-digit ’opt hexadecimal-digit
  
hexadecimal-digit: one of
0 1 2 3 4 5 6 7 8 9
a b c d e f
A B C D E F

binary-digit: one of
  0 1

integer-suffix:
  unsigned-suffix long-suffix opt
  unsigned-suffix long-long-suffix
  unsigned-suffix bit-precise-int-suffix
  long-suffix unsigned-suffix opt
  long-long-suffix unsigned-suffix opt
  bit-precise-int-suffix unsigned-suffix opt
  
bit-precise-int-suffix: one of
  wb WB

unsigned-suffix: one of
  u U

long-suffix: one of
  l L

long-long-suffix: one of
  ll LL

floating-constant:
 decimal-floating-constant
 hexadecimal-floating-constant

decimal-floating-constant:
 fractional-constant exponent-partopt floating-suffix opt
 digit-sequence exponent-part floating-suffix


hexadecimal-floating-constant:
 hexadecimal-prefix hexadecimal-fractional-constant
 binary-exponent-part floating-suffix opt
 hexadecimal-prefix hexadecimal-digit-sequence
 binary-exponent-part floating-suffix opt


fractional-constant:
 digit-sequence opt . digit-sequence
 digit-sequence 

exponent-part:
 e sign opt digit-sequence
 E sign opt digit-sequence

sign: one of
 + -

digit-sequence:
 digit
 digit-sequence ' opt digit
 
hexadecimal-fractional-constant:
 hexadecimal-digit-sequenceopt . hexadecimal-digit-sequence
 hexadecimal-digit-sequence .

binary-exponent-part:
 p sign opt digit-sequence
 P sign opt digit-sequence
 
floating-suffix: one of
 f l F L df dd dl DF DD DL
 
enumeration-constant:
identifier

character-constant:
  encoding-prefixopt ' c-char-sequence '

encoding-prefix:
u8
u
U
L

c-char-sequence:
 c-char
 c-char-sequence c-char

c-char:
 /*any member of the source character set except
   the single-quote ’, backslash \, or new-line character*/
escape-sequence

escape-sequence:
 simple-escape-sequence
 octal-escape-sequence
 hexadecimal-escape-sequence
 universal-character-name

simple-escape-sequence: one of
 \' \" \? \\
 \a \b \f \n \r \t \v
 
octal-escape-sequence:
 \ octal-digit
 \ octal-digit octal-digit
 \ octal-digit octal-digit octal-digit

hexadecimal-escape-sequence:
 \x hexadecimal-digit
 hexadecimal-escape-sequence hexadecimal-digit

predefined-constant:
 "false"
 "true"
 "nullptr"

/*String Literals*/

string-literal:
  encoding-prefix opt " s-char-sequenceopt "
  
s-char-sequence:
 s-char
 s-char-sequence s-char
 
s-char:
 /*
  any member of the source character set except
  the double-quote ", backslash \, or new-line character
 */
 escape-sequence


/*Punctuators*/

punctuator: one of
 [ ] ( ) { } . ->
 ++ -- & * + - ~ !
 / % << >> < > <= >= == != ^ | && ||
 ? : :: ; ...
 = *= /= %= += -= <<= >>= &= ^= |=
 , # ##
 <: :> <% %> %: %:%:

/*Header names*/

header-name:
 < h-char-sequence >
 " q-char-sequence "
 
h-char-sequence:
 h-char
 h-char-sequence h-char

h-char:
 /*any member of the source character set except
  the new-line character and >*/
 
q-char-sequence:
 q-char
 q-char-sequence q-char

q-char:
 /*any member of the source character set except
 the new-line character and "*/

pp-number:
 digit
 . digit
 pp-number identifier-continue
 pp-number ' digit
 pp-number ' nondigit
 pp-number e sign
 pp-number E sign
 pp-number p sign
 pp-number P sign
 pp-number .



(6.4.8) pp-number:
 digit
 . digit
 pp-number identifier-continue
 pp-number ' digit
 pp-number ' nondigit
 pp-number e sign
 pp-number E sign
 pp-number p sign
 pp-number P sign
 pp-number .

primary-expression:
 identifier
 constant
 string-literal
 ( expression )
 generic-selection


generic-selection:
 "_Generic" ( assignment-expression , generic-assoc-list )

generic-assoc-list:
 generic-association
 generic-assoc-list , generic-association
 
 generic-association:
  type-name : assignment-expression
  "default" : assignment-expression
  
postfix-expression:
 primary-expression
 postfix-expression [ expression ]
 postfix-expression ( argument-expression-list opt )
 postfix-expression . identifier
 postfix-expression -> identifier
 postfix-expression ++
 postfix-expression --
 compound-literal
 
argument-expression-list:
 assignment-expression
 argument-expression-list , assignment-expression

compound-literal:
  ( storage-class-specifiersopt type-name ) braced-initializer
  
storage-class-specifiers:
 storage-class-specifier
 storage-class-specifiers storage-class-specifier

unary-expression:
  postfix-expression
  ++ unary-expression
  -- unary-expression
  unary-operator cast-expression
  sizeof unary-expression
  sizeof ( type-name )
  alignof ( type-name )

unary-operator: one of
  & * + - ~ !

cast-expression:
 unary-expression
 ( type-name ) cast-expression

multiplicative-expression:
 cast-expression
 multiplicative-expression * cast-expression
 multiplicative-expression / cast-expression
 multiplicative-expression % cast-expression

additive-expression:
 multiplicative-expression
 additive-expression + multiplicative-expression
 additive-expression - multiplicative-expression
 
shift-expression:
 additive-expression
 shift-expression << additive-expression
 shift-expression >> additive-expression
 
relational-expression:
 shift-expression
 relational-expression < shift-expression
 relational-expression > shift-expression
 relational-expression <= shift-expression
 relational-expression >= shift-expression

equality-expression:
 relational-expression
 equality-expression == relational-expression
 equality-expression != relational-expression

AND-expression:
  equality-expression
 AND-expression & equality-expression
 
exclusive-OR-expression:
 AND-expression
 exclusive-OR-expression ^ AND-expression
 
inclusive-OR-expression:
  exclusive-OR-expression
  inclusive-OR-expression | exclusive-OR-expression
  
logical-AND-expression:
  inclusive-OR-expression
  logical-AND-expression && inclusive-OR-expression

logical-OR-expression:
  logical-AND-expression
  logical-OR-expression || logical-AND-expression

(6.5.15) conditional-expression:
  logical-OR-expression
  logical-OR-expression ? expression : conditional-expression
  
(6.5.16) assignment-expression:
  conditional-expression
  unary-expression assignment-operator assignment-expression
  
(6.5.16) assignment-operator: one of
  = *= /= %= += -= <<= >>= &= ^= |=

(6.5.17) expression:
  assignment-expression
  expression , assignment-expression

(6.6) constant-expression:
  conditional-expression

(6.7) declaration:
  declaration-specifiers init-declarator-listopt ;
  attribute-specifier-sequence declaration-specifiers init-declarator-list ;
  static_assert-declaration
  attribute-declaration
  
(6.7) declaration-specifiers:
  declaration-specifier attribute-specifier-sequenceopt
  declaration-specifier declaration-specifiers
  
(6.7) declaration-specifier:
  storage-class-specifier
  type-specifier-qualifier
  function-specifier
  
(6.7) init-declarator-list:
  init-declarator
  init-declarator-list , init-declarator

(6.7) init-declarator:
  declarator
  declarator = initializer

(6.7) attribute-declaration:
  attribute-specifier-sequence ;

(6.7.1) storage-class-specifier:
  "auto"
  "constexpr"
  "extern"
  "register"
  "static"
  "thread_local"
  "typedef"

type-specifier:
 "void"
 "char"
 "short"
 "int"
 "long"
 "float"
 "double"
 "signed"
 "unsigned"
 "_BitInt" ( constant-expression )
 "bool"
 "_Complex"
 "_Decimal32"
 "_Decimal64"
 "_Decimal128"
 atomic-type-specifier
 struct-or-union-specifier
 enum-specifier
 typedef-name
 typeof-specifier

struct-or-union-specifier:
 struct-or-union attribute-specifier-sequence opt identifier opt { member-declaration-list }
 struct-or-union attribute-specifier-sequence opt identifier

struct-or-union:
 "struct"
 "union"

member-declaration-list:
  member-declaration
 member-declaration-list member-declaration
 
(6.7.2.1) member-declaration:
  attribute-specifier-sequenceopt specifier-qualifier-list member-declarator-listopt ;
  static_assert-declaration
  
(6.7.2.1) specifier-qualifier-list:
  type-specifier-qualifier attribute-specifier-sequenceopt
  type-specifier-qualifier specifier-qualifier-list
  
(6.7.2.1) type-specifier-qualifier:
  type-specifier
  type-qualifier
  alignment-specifier
  
(6.7.2.1) member-declarator-list:
  member-declarator
  member-declarator-list , member-declarator
  
(6.7.2.1) member-declarator:
  declarator
  declarator opt : constant-expression

(6.7.2.2) enum-specifier:
  "enum" attribute-specifier-sequenceopt identifieropt enum-type-specifieropt { enumerator-list }
  "enum" attribute-specifier-sequenceopt identifieropt enum-type-specifieropt { enumerator-list , }
  "enum" identifier enum-type-specifieropt
  
(6.7.2.2) enumerator-list:
  enumerator
  enumerator-list , enumerator

(6.7.2.2) enumerator:
  enumeration-constant attribute-specifier-sequenceopt
  enumeration-constant attribute-specifier-sequenceopt = constant-expression (6.7.2.2)
  enum-type-specifier:
  : specifier-qualifier-list
  
(6.7.2.4) atomic-type-specifier:
 "_Atomic" ( type-name )
 
(6.7.2.5) typeof-specifier:
  "typeof" ( typeof-specifier-argument )
  "typeof_unqual" ( typeof-specifier-argument )
  
(6.7.2.5) typeof-specifier-argument:
  expression
  type-name

(6.7.3) type-qualifier:
 "const"
 "restrict"
 "volatile"
 "_Atomic"

(6.7.4) function-specifier:
  "inline"
  "_Noreturn"

(6.7.5) alignment-specifier:
 "alignas" ( type-name )
 "alignas" ( constant-expression )

(6.7.6) declarator:
 pointer opt direct-declarator
 
(6.7.6) direct-declarator:
  identifier attribute-specifier-sequence opt
  ( declarator )
  array-declarator attribute-specifier-sequence opt
  function-declarator attribute-specifier-sequence opt
  
(6.7.6) array-declarator:
  direct-declarator [ type-qualifier-listopt assignment-expressionopt ]
  direct-declarator [ static type-qualifier-listopt assignment-expression ]
  direct-declarator [ type-qualifier-list static assignment-expression ]
  direct-declarator [ type-qualifier-listopt * ]

(6.7.6) function-declarator:
  direct-declarator ( parameter-type-listopt )

(6.7.6) pointer:
  * attribute-specifier-sequenceopt type-qualifier-list opt
  * attribute-specifier-sequenceopt type-qualifier-list opt pointer

(6.7.6) type-qualifier-list:
  type-qualifier
  type-qualifier-list type-qualifier

(6.7.6) parameter-type-list:
  parameter-list
  parameter-list , ... ...

(6.7.6) parameter-list:
  parameter-declaration
  parameter-list , parameter-declaration

(6.7.6) parameter-declaration:
  attribute-specifier-sequenceopt declaration-specifiers declarator
  attribute-specifier-sequenceopt declaration-specifiers abstract-declaratoropt
  
(6.7.7) type-name:
  specifier-qualifier-list abstract-declarator opt
  
(6.7.7) abstract-declarator:
 pointer
 pointer opt direct-abstract-declarator
 
(6.7.7) direct-abstract-declarator:
 ( abstract-declarator )
 array-abstract-declarator attribute-specifier-sequenceopt
 function-abstract-declarator attribute-specifier-sequenceopt
 
(6.7.7) array-abstract-declarator:
 direct-abstract-declaratoropt [ type-qualifier-listopt assignment-expressionopt ]
 direct-abstract-declaratoropt [ static type-qualifier-listopt assignment-expression ]
 direct-abstract-declaratoropt [ type-qualifier-list static assignment-expression ]
 direct-abstract-declaratoropt [ * ]
 
(6.7.7) function-abstract-declarator:
  direct-abstract-declaratoropt ( parameter-type-listopt )
  
(6.7.8) typedef-name:
  identifier
  
(6.7.10) braced-initializer:
 { }
 { initializer-list }
 { initializer-list , }
 
(6.7.10) initializer:
 assignment-expression
 braced-initializer

(6.7.10) initializer-list:
 designationopt initializer
 initializer-list , designationopt initializer
 
(6.7.10) designation:
 designator-list =
 
(6.7.10) designator-list:
 designator
 designator-list designator
 
(6.7.10) designator:
 [ constant-expression ]
 . identifier

(6.7.11) static_assert-declaration:
 "static_assert" ( constant-expression , string-literal ) ;
 "static_assert" ( constant-expression ) ;

(6.7.12.1) attribute-specifier-sequence:
  attribute-specifier-sequence opt attribute-specifier
  
(6.7.12.1) attribute-specifier:
 [ [ attribute-list ] ]
 
(6.7.12.1) attribute-list:
 attribute opt
 attribute-list , attribute opt

(6.7.12.1) attribute:
 attribute-token attribute-argument-clauseo

(6.7.12.1) attribute-token:
 standard-attribute
 attribute-prefixed-token

(6.7.12.1) standard-attribute:
  identifier
  
(6.7.12.1) attribute-prefixed-token:
  attribute-prefix :: identifier

(6.7.12.1) attribute-prefix:
  identifier
  
(6.7.12.1) attribute-argument-clause:
  ( balanced-token-sequence opt )
  
(6.7.12.1) balanced-token-sequence:
  balanced-token
  balanced-token-sequence balanced-token
  
(6.7.12.1) balanced-token:
  ( balanced-token-sequence opt )
  [ balanced-token-sequence opt ]
  { balanced-token-sequence opt }
  /*any token other than a parenthesis, a bracket, or a brace*/

/*A.2.3 Statements*/

(6.8) statement:
  labeled-statement
  unlabeled-statement
  
(6.8) unlabeled-statement:
  expression-statement
  attribute-specifier-sequenceopt primary-block
  attribute-specifier-sequenceopt jump-statement
  
(6.8) primary-block:
  compound-statement
  selection-statement
  iteration-statement
  
(6.8) secondary-block:
  statement
  
(6.8.1) label:
  attribute-specifier-sequenceopt identifier :
  attribute-specifier-sequenceopt case constant-expression :
  attribute-specifier-sequenceopt default :
  
(6.8.1) labeled-statement:
  label statement
  
(6.8.2) compound-statement:
  { block-item-listopt }
  
(6.8.2) block-item-list:
  block-item
  block-item-list block-item
  
(6.8.2) block-item:
  declaration
  unlabeled-statement
  label

(6.8.3) expression-statement:
  expression opt ;
  attribute-specifier-sequence expression ;
  
(6.8.4) selection-statement:
  "if" ( expression ) secondary-block
  "if" ( expression ) secondary-block "else" secondary-block
  "switch" ( expression ) secondary-block
  
(6.8.5) iteration-statement:
  "while" ( expression ) secondary-block
  "do" secondary-block "while" ( expression ) ;
  "for" ( expressionopt ; expressionopt ; expression opt ) secondary-block
  "for" ( declaration expressionopt ; expression opt ) secondary-block
  
(6.8.6) jump-statement:
 "goto" identifier ;
 "continue" ;
 "break" ;
 "return" expression opt ;
 
(6.9) translation-unit:
  external-declaration
  translation-unit external-declaration
  
(6.9) external-declaration:
  function-definition
  declaration
  
(6.9.1) function-definition:
  attribute-specifier-sequence opt declaration-specifiers declarator function-body
  
(6.9.1) function-body:
  compound-statement


(6.10) preprocessing-file:
  group opt

(6.10) group:
  group-part
  group group-part
  
(6.10) group-part:
 if-section
 control-line
 text-line
 # non-directive

(6.10) if-section:
  if-group elif-groupsopt else-groupopt endif-line
  
(6.10) if-group:
 # "if"  constant-expression new-line group opt
 # "ifdef" identifier new-line groupopt
 # "ifndef" identifier new-line groupo

(6.10) elif-groups:
  elif-group
  elif-groups elif-group
  
(6.10) elif-group:
 # "elif" constant-expression new-line groupopt
 # "elifdef" identifier new-line groupopt
 # "elifndef" identifier new-line groupopt
 
(6.10) else-group:
 # "else" new-line groupopt

(6.10) endif-line:
 # "endif" new-line

(6.10) control-line:
 # "include" pp-tokens new-line
 # "embed" pp-tokens new-line
 # "define" identifier replacement-list new-line
 # "define" identifier lparen identifier-listopt ) replacement-list new-line
 # "define" identifier lparen ... ) replacement-list new-line
 # "define" identifier lparen identifier-list , ... ) replacement-list new-line
 # "undef" identifier new-line
 # "line" pp-tokens new-line
 # "error" pp-tokensopt new-line
 # "warning" pp-tokensopt new-line
 # "pragma" pp-tokensopt new-line
 # new-line
 
(6.10) text-line:
  pp-tokensopt new-line
  
(6.10) non-directive:
  pp-tokens new-line
  
(6.10) lparen:
  a ( character not immediately preceded by white space

(6.10) replacement-list:
  pp-tokensopt
  
(6.10) pp-tokens:
  preprocessing-token
  pp-tokens preprocessing-token

(6.10) new-line:
  /*the new-line character*/
  
(6.10) identifier-list:
  identifier
  identifier-list , identifier
  
(6.10) pp-parameter:
  pp-parameter-name pp-parameter-clauseopt
  
(6.10) pp-parameter-name:
  pp-standard-parameter
  pp-prefixed-parameter
  
(6.10) pp-standard-parameter:
  identifier
  
(6.10) pp-prefixed-parameter:
  identifier :: identifier
  
(6.10) pp-parameter-clause:
  ( pp-balanced-token-sequenceopt )
  
(6.10) pp-balanced-token-sequence:
  pp-balanced-token
  pp-balanced-token-sequence pp-balanced-token

(6.10) pp-balanced-token:
  ( pp-balanced-token-sequenceopt )
  [ pp-balanced-token-sequenceopt ]
  { pp-balanced-token-sequenceopt }
  /*any pp-token other than a parenthesis, a bracket, or a brace*/

(6.10) embed-parameter-sequence:
  pp-parameter
  embed-parameter-sequence pp-parameter
  defined-macro-expression:
  "defined" identifier
  "defined" ( identifier )
 
 h-preprocessing-token:
  any preprocessing-token other than >
  h-pp-tokens:
  h-preprocessing-token
  h-pp-tokens h-preprocessing-token
 
 header-name-tokens:
  string-literal
  < h-pp-tokens >
 
has-include-expression:
"__has_include" ( header-name )
"__has_include" ( header-name-tokens )

has-embed-expression:
"__has_embed" ( header-name embed-parameter-sequenceopt )
"__has_embed" ( header-name-tokens pp-balanced-token-sequenceopt )

has-c-attribute-express:
"__has_c_attribute" ( pp-tokens )

va-opt-replacement:
  "__VA_OPT__" ( pp-tokensopt )

(6.10.7) standard-pragma:
  # "pragma" "STDC" "FP_CONTRACT" on-off-switch
  # "pragma" "STDC" "FENV_ACCESS" on-off-switch
  # "pragma" "STDC" "FENV_DEC_ROUND" dec-direction
  # "pragma" "STDC" "FENV_ROUND" direction
  # "pragma" "STDC" "CX_LIMITED_RANGE" on-off-switch

(6.10.7) on-off-switch: one of
  "ON" "OFF" "DEFAULT"
  
(6.10.7) direction: one of
  "FE_DOWNWARD" "FE_TONEAREST" "FE_TONEARESTFROMZERO"
  "FE_TOWARDZERO" "FE_UPWARD" "FE_DYNAMIC"
  
(6.10.7) dec-direction: one of
  "FE_DEC_DOWNWARD" "FE_DEC_TONEAREST" "FE_DEC_TONEARESTFROMZERO"
  "FE_DEC_TOWARDZERO" "FE_DEC_UPWARD" "FE_DEC_DYNAMIC"

(7.24.1.5) n-char-sequence:
 digit
 nondigit
 n-char-sequence digit
 n-char-sequence nondigit

